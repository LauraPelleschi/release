# OASIS_START
# DO NOT EDIT (digest: 8d11c40e0ac95ab932e7f4c4308cd4f0)
# Ignore VCS directories, you can use the same kind of rule outside 
# OASIS_START/STOP if you want to exclude directories that contains 
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library release-buffer
"lib/buffer/release-buffer.cmxs": use_release-buffer
<lib/buffer/*.ml{,i}>: pkg_lwt
<lib/buffer/*.ml{,i}>: pkg_lwt.unix
<lib/buffer/*.ml{,i}>: pkg_lwt.syntax
# Library release-bytes
"lib/bytes/release-bytes.cmxs": use_release-bytes
<lib/bytes/*.ml{,i}>: use_release-buffer
<lib/bytes/*.ml{,i}>: pkg_lwt
<lib/bytes/*.ml{,i}>: pkg_lwt.unix
<lib/bytes/*.ml{,i}>: pkg_lwt.syntax
<lib/bytes/*.ml{,i}>: pkg_uint.uint32
<lib/bytes/*.ml{,i}>: pkg_uint.uint64
<lib/bytes/*.ml{,i}>: pkg_uint.uint128
# Library release-option
"lib/option/release-option.cmxs": use_release-option
# Library release-config
"lib/config/release-config.cmxs": use_release-config
<lib/config/*.ml{,i}>: use_release-option
<lib/config/*.ml{,i}>: pkg_lwt
<lib/config/*.ml{,i}>: pkg_str
<lib/config/*.ml{,i}>: pkg_unix
# Library release
"lib/core/release.cmxs": use_release
<lib/core/*.ml{,i}>: use_release-buffer
<lib/core/*.ml{,i}>: use_release-option
<lib/core/*.ml{,i}>: pkg_lwt
<lib/core/*.ml{,i}>: pkg_lwt.unix
<lib/core/*.ml{,i}>: pkg_lwt.syntax
<lib/core/*.ml{,i}>: pkg_lwt.preemptive
<lib/core/*.ml{,i}>: pkg_threads
# Executable test_master
<lib_test/master.{native,byte}>: use_release
<lib_test/master.{native,byte}>: use_release-buffer
<lib_test/master.{native,byte}>: use_release-option
<lib_test/master.{native,byte}>: pkg_lwt
<lib_test/master.{native,byte}>: pkg_lwt.unix
<lib_test/master.{native,byte}>: pkg_lwt.syntax
<lib_test/master.{native,byte}>: pkg_str
<lib_test/master.{native,byte}>: pkg_lwt.preemptive
<lib_test/master.{native,byte}>: pkg_threads
# Executable test_slave
<lib_test/slave.{native,byte}>: use_release
<lib_test/slave.{native,byte}>: use_release-buffer
<lib_test/slave.{native,byte}>: use_release-option
<lib_test/slave.{native,byte}>: pkg_lwt
<lib_test/slave.{native,byte}>: pkg_lwt.unix
<lib_test/slave.{native,byte}>: pkg_lwt.syntax
<lib_test/slave.{native,byte}>: pkg_str
<lib_test/slave.{native,byte}>: pkg_lwt.preemptive
<lib_test/slave.{native,byte}>: pkg_threads
# Executable test_helper
<lib_test/helper.{native,byte}>: use_release
<lib_test/helper.{native,byte}>: use_release-buffer
<lib_test/helper.{native,byte}>: use_release-option
<lib_test/helper.{native,byte}>: pkg_lwt
<lib_test/helper.{native,byte}>: pkg_lwt.unix
<lib_test/helper.{native,byte}>: pkg_lwt.syntax
<lib_test/helper.{native,byte}>: pkg_str
<lib_test/helper.{native,byte}>: pkg_lwt.preemptive
<lib_test/helper.{native,byte}>: pkg_threads
# Executable masterctl
<lib_test/masterctl.{native,byte}>: use_release
<lib_test/masterctl.{native,byte}>: use_release-buffer
<lib_test/masterctl.{native,byte}>: use_release-option
<lib_test/masterctl.{native,byte}>: pkg_lwt
<lib_test/masterctl.{native,byte}>: pkg_lwt.unix
<lib_test/masterctl.{native,byte}>: pkg_lwt.syntax
<lib_test/masterctl.{native,byte}>: pkg_str
<lib_test/masterctl.{native,byte}>: pkg_lwt.preemptive
<lib_test/masterctl.{native,byte}>: pkg_threads
<lib_test/*.ml{,i}>: use_release
<lib_test/*.ml{,i}>: use_release-buffer
<lib_test/*.ml{,i}>: pkg_lwt.unix
<lib_test/*.ml{,i}>: pkg_lwt.syntax
<lib_test/*.ml{,i}>: pkg_lwt.preemptive
<lib_test/*.ml{,i}>: pkg_threads
# Executable test_config
<lib_test/config_test.{native,byte}>: use_release-config
<lib_test/config_test.{native,byte}>: use_release-option
<lib_test/config_test.{native,byte}>: pkg_lwt
<lib_test/config_test.{native,byte}>: pkg_str
<lib_test/config_test.{native,byte}>: pkg_unix
<lib_test/*.ml{,i}>: use_release-config
<lib_test/*.ml{,i}>: use_release-option
<lib_test/*.ml{,i}>: pkg_lwt
<lib_test/*.ml{,i}>: pkg_str
<lib_test/*.ml{,i}>: pkg_unix
# OASIS_STOP
<lib/option/*.ml>: annot
<lib/option/*.ml>: warn_error_A
<lib/config/*.ml>: annot
<lib/config/*.ml>: warn_error_A
<lib/buffer/*.ml>: syntax_camlp4o
<lib/buffer/*.ml>: annot
<lib/buffer/*.ml>: warn_error_A
<lib/core/*.ml>: syntax_camlp4o
<lib/core/*.ml>: annot
<lib/core/*.ml>: warn_error_A
#<lib/*.ml>: lwt_debug
<lib_test/*.ml>: syntax_camlp4o
<lib_test/*.ml>: annot
<lib_test/*.ml>: warn_error_A
#<lib_test/*.ml>: lwt_debug
